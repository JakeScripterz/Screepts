local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Create RemoteEvent for server communication
local stickToggleEvent = Instance.new("RemoteEvent")
stickToggleEvent.Name = "StickToggleEvent"
stickToggleEvent.Parent = ReplicatedStorage

-- Create a screen GUI and button
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "StickToggleGui"
screenGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")

local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 100, 0, 30)
toggleButton.Position = UDim2.new(0, 10, 0, 10)
toggleButton.Text = "Toggle Stick: Off"
toggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
toggleButton.Parent = screenGui

-- Variables
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local camera = workspace.CurrentCamera
local stickEnabled = false
local stickOffset = Vector3.new(0, -5, 0)
local transparentObjects = {}

-- Function to make objects transparent
local function setTransparency(object, transparency)
    if object:IsA("BasePart") then
        if not transparentObjects[object] then
            transparentObjects[object] = object.LocalTransparencyModifier
        end
        object.LocalTransparencyModifier = transparency
    end
end

-- Function to check and update transparency between camera and character
local function updateTransparency()
    -- Reset all previously modified objects
    for object, originalTransparency in pairs(transparentObjects) do
        object.LocalTransparencyModifier = originalTransparency
    end
    transparentObjects = {}

    if not stickEnabled then return end
    
    local targetPos = camera.CFrame.Position
    local characterPos = humanoidRootPart.Position
    
    -- Ray cast to find objects between camera and character
    local ray = Ray.new(targetPos, (characterPos - targetPos).Unit * 1000)
    local ignoreList = {character}
    
    while true do
        local hit, pos, normal, material = workspace:FindPartOnRayWithIgnoreList(ray, ignoreList)
        if not hit then break end
        
        -- Make the hit object semi-transparent
        setTransparency(hit, 0.8)
        table.insert(ignoreList, hit)
    end
end

-- Function to get the closest player
local function getClosestPlayer(position)
    local closestPlayer = nil
    local shortestDistance = math.huge
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= player and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (p.Character.HumanoidRootPart.Position - position).magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                closestPlayer = p
            end
        end
    end
    return closestPlayer
end

-- Function to stick to the nearest player
local function updateCharacterPosition()
    if stickEnabled then
        local closestPlayer = getClosestPlayer(humanoidRootPart.Position)
        if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local targetPosition = closestPlayer.Character.HumanoidRootPart.Position
            local newPosition = targetPosition + stickOffset
            humanoidRootPart.CFrame = CFrame.new(newPosition, newPosition + Vector3.new(0, 1, 0))
        end
    end
end

-- Toggle button functionality
toggleButton.MouseButton1Click:Connect(function()
    stickEnabled = not stickEnabled
    toggleButton.Text = "Toggle Stick: " .. (stickEnabled and "On" or "Off")
    toggleButton.BackgroundColor3 = stickEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    stickToggleEvent:FireServer(stickEnabled)
    
    -- Reset transparency when disabled
    if not stickEnabled then
        for object, originalTransparency in pairs(transparentObjects) do
            object.LocalTransparencyModifier = originalTransparency
        end
        transparentObjects = {}
    end
end)

-- Character respawn handling
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
end)

-- Update position and transparency every frame
RunService.RenderStepped:Connect(function()
    updateCharacterPosition()
    updateTransparency()
end)
