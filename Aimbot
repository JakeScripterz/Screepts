local fov = 100 local RunService = game:GetService("RunService") local UserInputService = game:GetService("UserInputService") local Players = game:GetService("Players") local Cam = game.Workspace.CurrentCamera -- Create the FOV ring local FOVring = Drawing.new("Circle") FOVring.Visible = true FOVring.Thickness = 2 FOVring.Color = Color3.fromRGB(128, 0, 128) -- Purple color FOVring.Filled = false FOVring.Radius = fov FOVring.Position = Cam.ViewportSize / 2 -- Variable to track if aiming is enabled local isAiming = false -- Function to update the FOV ring position local function updateDrawings() FOVring.Position = Cam.ViewportSize / 2 end -- Function to handle key press events local function onKeyDown(input) if input.KeyCode == Enum.KeyCode.Delete then RunService:UnbindFromRenderStep("FOVUpdate") FOVring:Remove() end end -- Function to handle mouse input events local function onMouseButtonPress(input, gameProcessed) if gameProcessed then return end if input.UserInputType == Enum.UserInputType.MouseButton2 then isAiming = true end end local function onMouseButtonRelease(input) if input.UserInputType == Enum.UserInputType.MouseButton2 then isAiming = false end end UserInputService.InputBegan:Connect(onMouseButtonPress) UserInputService.InputEnded:Connect(onMouseButtonRelease) UserInputService.InputBegan:Connect(onKeyDown) -- Function to adjust the camera to look at a target local function lookAt(target) local lookVector = (target - Cam.CFrame.Position).unit local newCFrame = CFrame.new(Cam.CFrame.Position, Cam.CFrame.Position + lookVector) Cam.CFrame = newCFrame end -- Function to find the closest player within the FOV local function getClosestPlayerInFOV(trg_part) local nearest = nil local last = math.huge local playerMousePos = Cam.ViewportSize / 2 for _, player in ipairs(Players:GetPlayers()) do if player ~= Players.LocalPlayer then local part = player.Character and player.Character:FindFirstChild(trg_part) if part then local ePos, isVisible = Cam:WorldToViewportPoint(part.Position) local distance = (Vector2.new(ePos.x, ePos.y) - playerMousePos).Magnitude if distance < last and isVisible and distance < fov then last = distance nearest = player end end end end return nearest end -- Update the FOV ring and handle aiming every frame RunService.RenderStepped:Connect(function() updateDrawings() if isAiming then local closest = getClosestPlayerInFOV("Head") if closest and closest.Character:FindFirstChild("Head") then lookAt(closest.Character.Head.Position) end end end)
